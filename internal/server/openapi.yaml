openapi: 3.0.3
info:
  title: My Go Server API
  description: |
    Simple, local development API for testing Go server features.
    Contains lightweight endpoints for health, metrics, and examples.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: health
    description: Liveness and readiness endpoints
  - name: info
    description: Service metadata and time
  - name: echo
    description: Echo and diagnostic endpoints
paths:
  /:
    get:
      tags: [info]
      summary: Service root with metadata
      description: Returns basic service metadata, uptime and request counter.
      responses:
        '200':
          description: Service information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RootInfo'

  /info:
    get:
      tags: [info]
      summary: Server start time and basic info
      responses:
        '200':
          description: Info about the service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'

  /time:
    get:
      tags: [info]
      summary: Current server time
      responses:
        '200':
          description: Current time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeResponse'

  /health:
    get:
      tags: [health]
      summary: Liveness check
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string

  /metrics:
    get:
      tags: [health]
      summary: Basic in-memory metrics
      responses:
        '200':
          description: Metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'

  /headers:
    get:
      tags: [echo]
      summary: Echo request headers
      responses:
        '200':
          description: Request headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeadersResponse'

  /echo:
    post:
      tags: [echo]
      summary: Echo request body and metadata
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Echoed data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EchoResponse'

  /hello:
    get:
      tags: [echo]
      summary: Returns a greeting message
      responses:
        '200':
          description: A greeting message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'

components:
  schemas:
    HelloResponse:
      type: object
      properties:
        message:
          type: string
          example: "Hello, World!"

    RootInfo:
      type: object
      properties:
        service:
          type: string
          example: "my-go-server"
        version:
          type: string
          example: "0.1.0"
        uptime:
          type: string
          example: "1m23s"
        requests:
          type: integer
          example: 42

    Info:
      type: object
      properties:
        name:
          type: string
          example: "my-go-server"
        version:
          type: string
          example: "0.1.0"
        started:
          type: string
          format: date-time

    TimeResponse:
      type: object
      properties:
        time:
          type: string
          format: date-time

    Metrics:
      type: object
      properties:
        uptime:
          type: string
        requests:
          type: integer

    HeadersResponse:
      type: object
      properties:
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

    EchoResponse:
      type: object
      properties:
        method:
          type: string
        query:
          type: string
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        body:
          type: string
